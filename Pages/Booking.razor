@page "/booking"
@using Data
@inject ApplicationDbContext dbContext
@using HACKH.Models
<MudLayout>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudDatePicker Label="Booking Day" @bind-Date="_booking.BookingDay" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTimePicker Label="Booking Start Time" @bind-Time="_booking.BookingStartTime" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTimePicker Label="Booking End Time" @bind-Time="_booking.BookingEndTime" />
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="BookRoom">Confirm Booking</MudButton>
        </MudItem>
        @if (_booking.bookingConfirmed)
        {
            <MudAlert Severity="Severity.Success"> @ConfirmedTime() </MudAlert>
        }
    </MudGrid>
</MudLayout>

@code {
    private BookingModel _booking = new BookingModel();

    private async Task BookRoom()
    {
        _booking.bookingConfirmed = true;
        OnSubmit();
    }

    string ConfirmedTime()
    {
        string startTime = _booking.BookingStartTime?.ToString(@"hh\:mm");
        string endTime = _booking.BookingEndTime?.ToString(@"hh\:mm");
        //string startTime = BookingStartTime?.Hours + ":" + BookingStartTime?.Minutes;
        //string endTime = BookingEndTime?.Hours + ":" + BookingEndTime?.Minutes;
        return $"Booking confirmed for {_booking.BookingDay?.ToShortDateString()} {startTime} - {endTime}";
    }

    public async Task OnSubmit()
    {
        BookingModel booking = new BookingModel(_booking);
        dbContext.Bookings.Add(booking);
        await dbContext.SaveChangesAsync();
    }
}
